{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// import { verifyOtpAndGetToken, fetchRazorpayKey, createOrder, initiatePayment, verifyOrder } from '../api';\n// import './Payment.css'; // Optional: for styling\n\n// const RAZORPAY_KEY = 'rzp_test_qUtLOVt2Ge3dFM';\n\n// const Payment = () => {\n//   const [token, setToken] = useState('');\n//   const [razorpayKey, setRazorpayKey] = useState('');\n\n//   useEffect(() => {\n//     const initializePayment = async () => {\n//       try {\n//         // Generate the token\n//         const generatedToken = await verifyOtpAndGetToken();\n//         setToken(generatedToken);\n\n//         // Fetch the Razorpay key\n//         const key = await fetchRazorpayKey(generatedToken);\n//         setRazorpayKey(key || RAZORPAY_KEY); // Fallback to hardcoded key if fetch fails\n//       } catch (error) {\n//         console.error('Initialization error:', error);\n//       }\n//     };\n\n//     // Ensure Razorpay script is loaded\n//     const checkRazorpayScript = () => {\n//       if (!window.Razorpay) {\n//         const script = document.createElement('script');\n//         script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n//         script.onload = () => initializePayment();\n//         script.onerror = () => console.error('Failed to load Razorpay script');\n//         document.body.appendChild(script);\n//       } else {\n//         initializePayment();\n//       }\n//     };\n\n//     checkRazorpayScript();\n//   }, []);\n\n//   const handlePayment = async () => {\n//     try {\n//       // Create an order\n//       const { _id: transactionId } = await createOrder(token, '6613d6fbbf1afca9aa1b519e', '662caa2d50bf43b5cef75232', 441, 'NEET25');\n\n//       // Initiate Razorpay payment\n//       const options = {\n//         key: razorpayKey, // Use the fetched or hardcoded key\n//         amount: '44100', // Amount in smallest unit (e.g., paise for INR)\n//         currency: 'INR',\n//         name: 'Test Order',\n//         description: 'Payment for Test Order',\n//         order_id: transactionId,\n//         handler: async (response) => {\n//           const { razorpay_payment_id, razorpay_signature } = response;\n//           try {\n//             await verifyOrder(token, razorpay_payment_id, razorpay_signature, transactionId);\n//             alert('Payment successful!');\n//           } catch (error) {\n//             console.error('Order verification error:', error);\n//             alert('Payment verification failed!');\n//           }\n//         },\n//         prefill: {\n//           name: 'Test User',\n//           email: 'testuser@example.com',\n//           contact: '+919999999999'\n//         },\n//         theme: {\n//           color: '#3399cc'\n//         }\n//       };\n\n//       const paymentObject = new window.Razorpay(options);\n//       paymentObject.open();\n\n//     } catch (error) {\n//       console.error('Payment error:', error);\n//       alert('Payment failed!');\n//     }\n//   };\n\n//   return (\n//     <div className=\"payment-container\">\n//       <button onClick={handlePayment} disabled={!razorpayKey}>\n//         Pay Now\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default Payment;","map":{"version":3,"names":[],"sources":["C:/Users/prath/Desktop/react/razorpay-integration/src/components/Payment.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { verifyOtpAndGetToken, fetchRazorpayKey, createOrder, initiatePayment, verifyOrder } from '../api';\r\n// import './Payment.css'; // Optional: for styling\r\n\r\n// const RAZORPAY_KEY = 'rzp_test_qUtLOVt2Ge3dFM';\r\n\r\n// const Payment = () => {\r\n//   const [token, setToken] = useState('');\r\n//   const [razorpayKey, setRazorpayKey] = useState('');\r\n\r\n//   useEffect(() => {\r\n//     const initializePayment = async () => {\r\n//       try {\r\n//         // Generate the token\r\n//         const generatedToken = await verifyOtpAndGetToken();\r\n//         setToken(generatedToken);\r\n\r\n//         // Fetch the Razorpay key\r\n//         const key = await fetchRazorpayKey(generatedToken);\r\n//         setRazorpayKey(key || RAZORPAY_KEY); // Fallback to hardcoded key if fetch fails\r\n//       } catch (error) {\r\n//         console.error('Initialization error:', error);\r\n//       }\r\n//     };\r\n\r\n//     // Ensure Razorpay script is loaded\r\n//     const checkRazorpayScript = () => {\r\n//       if (!window.Razorpay) {\r\n//         const script = document.createElement('script');\r\n//         script.src = 'https://checkout.razorpay.com/v1/checkout.js';\r\n//         script.onload = () => initializePayment();\r\n//         script.onerror = () => console.error('Failed to load Razorpay script');\r\n//         document.body.appendChild(script);\r\n//       } else {\r\n//         initializePayment();\r\n//       }\r\n//     };\r\n\r\n//     checkRazorpayScript();\r\n//   }, []);\r\n\r\n//   const handlePayment = async () => {\r\n//     try {\r\n//       // Create an order\r\n//       const { _id: transactionId } = await createOrder(token, '6613d6fbbf1afca9aa1b519e', '662caa2d50bf43b5cef75232', 441, 'NEET25');\r\n      \r\n//       // Initiate Razorpay payment\r\n//       const options = {\r\n//         key: razorpayKey, // Use the fetched or hardcoded key\r\n//         amount: '44100', // Amount in smallest unit (e.g., paise for INR)\r\n//         currency: 'INR',\r\n//         name: 'Test Order',\r\n//         description: 'Payment for Test Order',\r\n//         order_id: transactionId,\r\n//         handler: async (response) => {\r\n//           const { razorpay_payment_id, razorpay_signature } = response;\r\n//           try {\r\n//             await verifyOrder(token, razorpay_payment_id, razorpay_signature, transactionId);\r\n//             alert('Payment successful!');\r\n//           } catch (error) {\r\n//             console.error('Order verification error:', error);\r\n//             alert('Payment verification failed!');\r\n//           }\r\n//         },\r\n//         prefill: {\r\n//           name: 'Test User',\r\n//           email: 'testuser@example.com',\r\n//           contact: '+919999999999'\r\n//         },\r\n//         theme: {\r\n//           color: '#3399cc'\r\n//         }\r\n//       };\r\n\r\n//       const paymentObject = new window.Razorpay(options);\r\n//       paymentObject.open();\r\n\r\n//     } catch (error) {\r\n//       console.error('Payment error:', error);\r\n//       alert('Payment failed!');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"payment-container\">\r\n//       <button onClick={handlePayment} disabled={!razorpayKey}>\r\n//         Pay Now\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Payment;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}