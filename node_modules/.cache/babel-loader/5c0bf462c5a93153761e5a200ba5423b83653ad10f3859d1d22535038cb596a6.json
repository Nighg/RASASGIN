{"ast":null,"code":"import axios from 'axios';\nconst razorpayKey = 'rzp_test_qUtLOVt2Ge3dFM';\nexport const verifyOtpAndGetToken = async () => {\n  try {\n    const response = await axios.post('https://api.testbuddy.live/v1/auth/verifyotp', {\n      mobile: '+919098989999',\n      // Replace with the correct mobile number\n      otp: '8899' // Replace with the correct OTP\n    });\n    const token = response.data.token;\n    console.log('Generated Bearer Token:', token);\n    return token;\n  } catch (error) {\n    console.error('Error verifying OTP:', error);\n    throw error;\n  }\n};\nexport const fetchRazorpayKey = async token => {\n  try {\n    const response = await axios.post('https://api.testbuddy.live/v1/payment/key', {}, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data.key; // Assuming 'key' is returned in the response\n  } catch (error) {\n    console.error('Error fetching Razorpay key:', error);\n    throw error;\n  }\n};\nexport const createOrder = async (token, packageId, pricingId, finalAmount, couponCode) => {\n  try {\n    const response = await axios.post('https://api.testbuddy.live/v1/order/create', {\n      packageId,\n      pricingId,\n      finalAmount,\n      couponCode\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data._id; // Assuming '_id' is the transactionId\n  } catch (error) {\n    console.error('Error creating order:', error);\n    throw error;\n  }\n};\nexport const initiatePayment = async (orderId, razorpayKey, verifyOrder) => {\n  const options = {\n    key: rzp_test_qUtLOVt2Ge3dFM,\n    amount: 44100,\n    // Amount in paise (e.g., 441.00 INR)\n    currency: 'INR',\n    name: 'Your Company Name',\n    description: 'Test Transaction',\n    order_id: orderId,\n    handler: async response => {\n      try {\n        await verifyOrder(response.razorpay_payment_id, response.razorpay_signature, orderId);\n        alert('Payment Successful!');\n      } catch (error) {\n        alert('Payment Verification Failed!');\n      }\n    },\n    prefill: {\n      name: 'John Doe',\n      email: 'john.doe@example.com',\n      contact: '9999999999'\n    }\n  };\n  const rzp = new window.Razorpay(options);\n  rzp.open();\n};\nexport const verifyOrder = async (token, razorpayPaymentId, razorpaySignature, transactionId) => {\n  try {\n    const response = await axios.post('https://api.testbuddy.live/v1/order/verify', {\n      transactionId,\n      razorpayPaymentId,\n      razorpaySignature\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error verifying order:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","razorpayKey","verifyOtpAndGetToken","response","post","mobile","otp","token","data","console","log","error","fetchRazorpayKey","headers","Authorization","key","createOrder","packageId","pricingId","finalAmount","couponCode","_id","initiatePayment","orderId","verifyOrder","options","rzp_test_qUtLOVt2Ge3dFM","amount","currency","name","description","order_id","handler","razorpay_payment_id","razorpay_signature","alert","prefill","email","contact","rzp","window","Razorpay","open","razorpayPaymentId","razorpaySignature","transactionId"],"sources":["C:/Users/prath/Desktop/react/razorpay-integration/src/api.js"],"sourcesContent":["import axios from 'axios';\r\nconst razorpayKey = 'rzp_test_qUtLOVt2Ge3dFM';\r\n\r\nexport const verifyOtpAndGetToken = async () => {\r\n  try {\r\n    const response = await axios.post('https://api.testbuddy.live/v1/auth/verifyotp', {\r\n      mobile: '+919098989999', // Replace with the correct mobile number\r\n      otp: '8899', // Replace with the correct OTP\r\n    });\r\n\r\n    const token = response.data.token;\r\n    console.log('Generated Bearer Token:', token);\r\n    return token;\r\n  } catch (error) {\r\n    console.error('Error verifying OTP:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchRazorpayKey = async (token) => {\r\n    try {\r\n      const response = await axios.post('https://api.testbuddy.live/v1/payment/key', {}, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      return response.data.key; // Assuming 'key' is returned in the response\r\n    } catch (error) {\r\n      console.error('Error fetching Razorpay key:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\n\r\n  export const createOrder = async (token, packageId, pricingId, finalAmount, couponCode) => {\r\n    try {\r\n      const response = await axios.post(\r\n        'https://api.testbuddy.live/v1/order/create',\r\n        {\r\n          packageId,\r\n          pricingId,\r\n          finalAmount,\r\n          couponCode,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      return response.data._id; // Assuming '_id' is the transactionId\r\n    } catch (error) {\r\n      console.error('Error creating order:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  export const initiatePayment = async (orderId, razorpayKey, verifyOrder) => {\r\n    const options = {\r\n      key: \r\n      rzp_test_qUtLOVt2Ge3dFM,\r\n      amount: 44100, // Amount in paise (e.g., 441.00 INR)\r\n      currency: 'INR',\r\n      name: 'Your Company Name',\r\n      description: 'Test Transaction',\r\n      order_id: orderId,\r\n      handler: async (response) => {\r\n        try {\r\n          await verifyOrder(response.razorpay_payment_id, response.razorpay_signature, orderId);\r\n          alert('Payment Successful!');\r\n        } catch (error) {\r\n          alert('Payment Verification Failed!');\r\n        }\r\n      },\r\n      prefill: {\r\n        name: 'John Doe',\r\n        email: 'john.doe@example.com',\r\n        contact: '9999999999',\r\n      },\r\n    };\r\n  \r\n    const rzp = new window.Razorpay(options);\r\n    rzp.open();\r\n  };\r\n  \r\n\r\n  export const verifyOrder = async (token, razorpayPaymentId, razorpaySignature, transactionId) => {\r\n    try {\r\n      const response = await axios.post(\r\n        'https://api.testbuddy.live/v1/order/verify',\r\n        {\r\n          transactionId,\r\n          razorpayPaymentId,\r\n          razorpaySignature,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error verifying order:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}