{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prath\\\\Desktop\\\\react\\\\razorpay-integration\\\\src\\\\components\\\\Payment.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import { verifyOtpAndGetToken, fetchRazorpayKey, createOrder, initiatePayment, verifyOrder } from '../api';\n// import './Payment.css'; // Optional: for styling\n\n// const RAZORPAY_KEY = 'rzp_test_qUtLOVt2Ge3dFM';\n\n// const Payment = () => {\n//   const [token, setToken] = useState('');\n//   const [razorpayKey, setRazorpayKey] = useState('');\n\n//   useEffect(() => {\n//     const initializePayment = async () => {\n//       try {\n//         // Generate the token\n//         const generatedToken = await verifyOtpAndGetToken();\n//         setToken(generatedToken);\n\n//         // Fetch the Razorpay key\n//         const key = await fetchRazorpayKey(generatedToken);\n//         setRazorpayKey(key || RAZORPAY_KEY); // Fallback to hardcoded key if fetch fails\n//       } catch (error) {\n//         console.error('Initialization error:', error);\n//       }\n//     };\n\n//     // Ensure Razorpay script is loaded\n//     const checkRazorpayScript = () => {\n//       if (!window.Razorpay) {\n//         const script = document.createElement('script');\n//         script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n//         script.onload = () => initializePayment();\n//         script.onerror = () => console.error('Failed to load Razorpay script');\n//         document.body.appendChild(script);\n//       } else {\n//         initializePayment();\n//       }\n//     };\n\n//     checkRazorpayScript();\n//   }, []);\n\n//   const handlePayment = async () => {\n//     try {\n//       // Create an order\n//       const { _id: transactionId } = await createOrder(token, '6613d6fbbf1afca9aa1b519e', '662caa2d50bf43b5cef75232', 441, 'NEET25');\n\n//       // Initiate Razorpay payment\n//       const options = {\n//         key: razorpayKey, // Use the fetched or hardcoded key\n//         amount: '44100', // Amount in smallest unit (e.g., paise for INR)\n//         currency: 'INR',\n//         name: 'Test Order',\n//         description: 'Payment for Test Order',\n//         order_id: transactionId,\n//         handler: async (response) => {\n//           const { razorpay_payment_id, razorpay_signature } = response;\n//           try {\n//             await verifyOrder(token, razorpay_payment_id, razorpay_signature, transactionId);\n//             alert('Payment successful!');\n//           } catch (error) {\n//             console.error('Order verification error:', error);\n//             alert('Payment verification failed!');\n//           }\n//         },\n//         prefill: {\n//           name: 'Test User',\n//           email: 'testuser@example.com',\n//           contact: '+919999999999'\n//         },\n//         theme: {\n//           color: '#3399cc'\n//         }\n//       };\n\n//       const paymentObject = new window.Razorpay(options);\n//       paymentObject.open();\n\n//     } catch (error) {\n//       console.error('Payment error:', error);\n//       alert('Payment failed!');\n//     }\n//   };\n\n//   return (\n//     <div className=\"payment-container\">\n//       <button onClick={handlePayment} disabled={!razorpayKey}>\n//         Pay Now\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default Payment;\n\nimport React, { useEffect, useState } from 'react';\nimport { verifyOtpAndGetToken, fetchRazorpayKey, createOrder, initiatePayment, verifyOrder } from '../api';\nimport './Payment.css'; // Optional: for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Payment = () => {\n  _s();\n  const [token, setToken] = useState('');\n  const [razorpayKey, setRazorpayKey] = useState('');\n  useEffect(() => {\n    const initializePayment = async () => {\n      try {\n        // Generate the token\n        const generatedToken = await verifyOtpAndGetToken();\n        setToken(generatedToken);\n\n        // Fetch the Razorpay key\n        const key = await fetchRazorpayKey(generatedToken);\n        setRazorpayKey(key || 'rzp_test_qUtLOVt2Ge3dFM'); // Fallback to hardcoded key if fetch fails\n      } catch (error) {\n        console.error('Initialization error:', error.message);\n      }\n    };\n\n    // Ensure Razorpay script is loaded\n    const checkRazorpayScript = () => {\n      if (window.Razorpay) {\n        initializePayment();\n      } else {\n        const script = document.createElement('script');\n        script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n        script.onload = initializePayment;\n        script.onerror = () => console.error('Failed to load Razorpay script');\n        document.body.appendChild(script);\n      }\n    };\n    checkRazorpayScript();\n  }, []);\n\n  // const handlePayment = async () => {\n  //   try {\n  //     // Create an order\n  //     const { _id: transactionId } = await createOrder(token, '6613d6fbbf1afca9aa1b519e', '662caa2d50bf43b5cef75232', 441, 'NEET25');\n\n  //     // Initiate Razorpay payment\n  //     const options = {\n  //       key: razorpayKey, // Use the fetched or hardcoded key\n  //       amount: 44100, // Amount in smallest unit (e.g., paise for INR)\n  //       currency: 'INR',\n  //       name: 'Test Order',\n  //       description: 'Payment for Test Order',\n  //       order_id: transactionId,\n  //       handler: async (response) => {\n  //         const { razorpay_payment_id, razorpay_signature } = response;\n  //         try {\n  //           await verifyOrder(token, razorpay_payment_id, razorpay_signature, transactionId);\n  //           alert('Payment successful!');\n  //         } catch (error) {\n  //           console.error('Order verification error:', error.message);\n  //           alert('Payment verification failed!');\n  //         }\n  //       },\n  //       prefill: {\n  //         name: 'Test User',\n  //         email: 'testuser@example.com',\n  //         contact: '+919999999999'\n  //       },\n  //       theme: {\n  //         color: '#3399cc'\n  //       }\n  //     };\n\n  //     const rzp = new window.Razorpay(options);\n  //     rzp.open();\n\n  //   } catch (error) {\n  //     console.error('Payment initiation error:', error.message);\n  //     alert('Payment initiation failed!');\n  //   }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment-container\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePayment,\n      disabled: !razorpayKey,\n      children: \"Pay Now\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n};\n_s(Payment, \"I+BJJ6xkkzzmY1GoTJn9hCYKsP8=\");\n_c = Payment;\nexport default Payment;\nvar _c;\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"names":["React","useEffect","useState","verifyOtpAndGetToken","fetchRazorpayKey","createOrder","initiatePayment","verifyOrder","jsxDEV","_jsxDEV","Payment","_s","token","setToken","razorpayKey","setRazorpayKey","initializePayment","generatedToken","key","error","console","message","checkRazorpayScript","window","Razorpay","script","document","createElement","src","onload","onerror","body","appendChild","className","children","onClick","handlePayment","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/prath/Desktop/react/razorpay-integration/src/components/Payment.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { verifyOtpAndGetToken, fetchRazorpayKey, createOrder, initiatePayment, verifyOrder } from '../api';\r\n// import './Payment.css'; // Optional: for styling\r\n\r\n// const RAZORPAY_KEY = 'rzp_test_qUtLOVt2Ge3dFM';\r\n\r\n// const Payment = () => {\r\n//   const [token, setToken] = useState('');\r\n//   const [razorpayKey, setRazorpayKey] = useState('');\r\n\r\n//   useEffect(() => {\r\n//     const initializePayment = async () => {\r\n//       try {\r\n//         // Generate the token\r\n//         const generatedToken = await verifyOtpAndGetToken();\r\n//         setToken(generatedToken);\r\n\r\n//         // Fetch the Razorpay key\r\n//         const key = await fetchRazorpayKey(generatedToken);\r\n//         setRazorpayKey(key || RAZORPAY_KEY); // Fallback to hardcoded key if fetch fails\r\n//       } catch (error) {\r\n//         console.error('Initialization error:', error);\r\n//       }\r\n//     };\r\n\r\n//     // Ensure Razorpay script is loaded\r\n//     const checkRazorpayScript = () => {\r\n//       if (!window.Razorpay) {\r\n//         const script = document.createElement('script');\r\n//         script.src = 'https://checkout.razorpay.com/v1/checkout.js';\r\n//         script.onload = () => initializePayment();\r\n//         script.onerror = () => console.error('Failed to load Razorpay script');\r\n//         document.body.appendChild(script);\r\n//       } else {\r\n//         initializePayment();\r\n//       }\r\n//     };\r\n\r\n//     checkRazorpayScript();\r\n//   }, []);\r\n\r\n//   const handlePayment = async () => {\r\n//     try {\r\n//       // Create an order\r\n//       const { _id: transactionId } = await createOrder(token, '6613d6fbbf1afca9aa1b519e', '662caa2d50bf43b5cef75232', 441, 'NEET25');\r\n      \r\n//       // Initiate Razorpay payment\r\n//       const options = {\r\n//         key: razorpayKey, // Use the fetched or hardcoded key\r\n//         amount: '44100', // Amount in smallest unit (e.g., paise for INR)\r\n//         currency: 'INR',\r\n//         name: 'Test Order',\r\n//         description: 'Payment for Test Order',\r\n//         order_id: transactionId,\r\n//         handler: async (response) => {\r\n//           const { razorpay_payment_id, razorpay_signature } = response;\r\n//           try {\r\n//             await verifyOrder(token, razorpay_payment_id, razorpay_signature, transactionId);\r\n//             alert('Payment successful!');\r\n//           } catch (error) {\r\n//             console.error('Order verification error:', error);\r\n//             alert('Payment verification failed!');\r\n//           }\r\n//         },\r\n//         prefill: {\r\n//           name: 'Test User',\r\n//           email: 'testuser@example.com',\r\n//           contact: '+919999999999'\r\n//         },\r\n//         theme: {\r\n//           color: '#3399cc'\r\n//         }\r\n//       };\r\n\r\n//       const paymentObject = new window.Razorpay(options);\r\n//       paymentObject.open();\r\n\r\n//     } catch (error) {\r\n//       console.error('Payment error:', error);\r\n//       alert('Payment failed!');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"payment-container\">\r\n//       <button onClick={handlePayment} disabled={!razorpayKey}>\r\n//         Pay Now\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Payment;\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { verifyOtpAndGetToken, fetchRazorpayKey, createOrder, initiatePayment, verifyOrder } from '../api';\r\nimport './Payment.css'; // Optional: for styling\r\n\r\nconst Payment = () => {\r\n  const [token, setToken] = useState('');\r\n  const [razorpayKey, setRazorpayKey] = useState('');\r\n\r\n  useEffect(() => {\r\n    const initializePayment = async () => {\r\n      try {\r\n        // Generate the token\r\n        const generatedToken = await verifyOtpAndGetToken();\r\n        setToken(generatedToken);\r\n\r\n        // Fetch the Razorpay key\r\n        const key = await fetchRazorpayKey(generatedToken);\r\n        setRazorpayKey(key || 'rzp_test_qUtLOVt2Ge3dFM'); // Fallback to hardcoded key if fetch fails\r\n      } catch (error) {\r\n        console.error('Initialization error:', error.message);\r\n      }\r\n    };\r\n\r\n    // Ensure Razorpay script is loaded\r\n    const checkRazorpayScript = () => {\r\n      if (window.Razorpay) {\r\n        initializePayment();\r\n      } else {\r\n        const script = document.createElement('script');\r\n        script.src = 'https://checkout.razorpay.com/v1/checkout.js';\r\n        script.onload = initializePayment;\r\n        script.onerror = () => console.error('Failed to load Razorpay script');\r\n        document.body.appendChild(script);\r\n      }\r\n    };\r\n\r\n    checkRazorpayScript();\r\n  }, []);\r\n\r\n  // const handlePayment = async () => {\r\n  //   try {\r\n  //     // Create an order\r\n  //     const { _id: transactionId } = await createOrder(token, '6613d6fbbf1afca9aa1b519e', '662caa2d50bf43b5cef75232', 441, 'NEET25');\r\n      \r\n  //     // Initiate Razorpay payment\r\n  //     const options = {\r\n  //       key: razorpayKey, // Use the fetched or hardcoded key\r\n  //       amount: 44100, // Amount in smallest unit (e.g., paise for INR)\r\n  //       currency: 'INR',\r\n  //       name: 'Test Order',\r\n  //       description: 'Payment for Test Order',\r\n  //       order_id: transactionId,\r\n  //       handler: async (response) => {\r\n  //         const { razorpay_payment_id, razorpay_signature } = response;\r\n  //         try {\r\n  //           await verifyOrder(token, razorpay_payment_id, razorpay_signature, transactionId);\r\n  //           alert('Payment successful!');\r\n  //         } catch (error) {\r\n  //           console.error('Order verification error:', error.message);\r\n  //           alert('Payment verification failed!');\r\n  //         }\r\n  //       },\r\n  //       prefill: {\r\n  //         name: 'Test User',\r\n  //         email: 'testuser@example.com',\r\n  //         contact: '+919999999999'\r\n  //       },\r\n  //       theme: {\r\n  //         color: '#3399cc'\r\n  //       }\r\n  //     };\r\n\r\n  //     const rzp = new window.Razorpay(options);\r\n  //     rzp.open();\r\n\r\n  //   } catch (error) {\r\n  //     console.error('Payment initiation error:', error.message);\r\n  //     alert('Payment initiation failed!');\r\n  //   }\r\n  // };\r\n\r\n\r\n  \r\n  return (\r\n    <div className=\"payment-container\">\r\n      <button onClick={handlePayment} disabled={!razorpayKey}>\r\n        Pay Now\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Payment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}