{"ast":null,"code":"import axios from 'axios';\n\n// Replace with your actual Razorpay key\nconst RAZORPAY_KEY = 'rzp_test_qUtLOVt2Ge3dFM';\n\n// Verify OTP and get a bearer token\nexport const verifyOtpAndGetToken = async () => {\n  try {\n    const response = await axios.post('https://api.testbuddy.live/v1/auth/verifyotp', {\n      mobile: '+919098989999',\n      // Replace with the correct mobile number\n      otp: '8899' // Replace with the correct OTP\n    });\n    const token = response.data.token;\n    console.log('Generated Bearer Token:', token);\n    return token;\n  } catch (error) {\n    console.error('Error verifying OTP:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\n\n// Load Razorpay script dynamically\nconst loadRazorpayScript = () => {\n  return new Promise((resolve, reject) => {\n    if (window.Razorpay) {\n      resolve();\n      return;\n    }\n    const script = document.createElement('script');\n    script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n    script.onload = () => resolve();\n    script.onerror = () => reject('Failed to load Razorpay script');\n    document.body.appendChild(script);\n  });\n};\n\n// Fetch Razorpay key using the token\nexport const fetchRazorpayKey = async token => {\n  try {\n    const response = await axios.post('https://api.testbuddy.live/v1/payment/key', {}, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data.key; // Ensure 'key' is the correct field\n  } catch (error) {\n    console.error('Error fetching Razorpay key:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\n\n// Create an order\nexport const createOrder = async (token, packageId, pricingId, finalAmount, couponCode) => {\n  try {\n    const response = await axios.post('https://api.testbuddy.live/v1/order/create', {\n      packageId,\n      pricingId,\n      finalAmount,\n      couponCode\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data._id; // Ensure '_id' is the correct field for the transaction ID\n  } catch (error) {\n    console.error('Error creating order:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};\n\n// Initiate payment using Razorpay\nexport const initiatePayment = async (orderId, razorpayKey, verifyOrder) => {\n  try {\n    const options = {\n      key: razorpayKey || RAZORPAY_KEY,\n      // Use the fetched Razorpay key\n      amount: 44100,\n      // Amount in paise (e.g., 441.00 INR)\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Test Transaction',\n      order_id: orderId,\n      handler: async response => {\n        try {\n          await verifyOrder(response.razorpay_payment_id, response.razorpay_signature, orderId);\n          alert('Payment Successful!');\n        } catch (error) {\n          alert('Payment Verification Failed!');\n        }\n      },\n      prefill: {\n        name: 'John Doe',\n        email: 'john.doe@example.com',\n        contact: '9999999999'\n      }\n    };\n    await loadRazorpayScript(); // Ensure Razorpay script is loaded\n    const rzp = new window.Razorpay(options);\n    rzp.open();\n  } catch (error) {\n    console.error('Error initiating payment:', error.message);\n    alert('Payment initiation failed!');\n  }\n};\n\n// Verify order payment details\nexport const verifyOrder = async (token, razorpayPaymentId, razorpaySignature, transactionId) => {\n  try {\n    const response = await axios.post('https://api.testbuddy.live/v1/order/verify', {\n      transactionId,\n      razorpayPaymentId,\n      razorpaySignature\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error verifying order:', error.response ? error.response.data : error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","RAZORPAY_KEY","verifyOtpAndGetToken","response","post","mobile","otp","token","data","console","log","error","message","loadRazorpayScript","Promise","resolve","reject","window","Razorpay","script","document","createElement","src","onload","onerror","body","appendChild","fetchRazorpayKey","headers","Authorization","key","createOrder","packageId","pricingId","finalAmount","couponCode","_id","initiatePayment","orderId","razorpayKey","verifyOrder","options","amount","currency","name","description","order_id","handler","razorpay_payment_id","razorpay_signature","alert","prefill","email","contact","rzp","open","razorpayPaymentId","razorpaySignature","transactionId"],"sources":["C:/Users/prath/Desktop/react/razorpay-integration/src/api.js"],"sourcesContent":["\r\nimport axios from 'axios';\r\n\r\n// Replace with your actual Razorpay key\r\nconst RAZORPAY_KEY = 'rzp_test_qUtLOVt2Ge3dFM';\r\n\r\n// Verify OTP and get a bearer token\r\nexport const verifyOtpAndGetToken = async () => {\r\n  try {\r\n    const response = await axios.post('https://api.testbuddy.live/v1/auth/verifyotp', {\r\n      mobile: '+919098989999', // Replace with the correct mobile number\r\n      otp: '8899', // Replace with the correct OTP\r\n    });\r\n\r\n    const token = response.data.token;\r\n    console.log('Generated Bearer Token:', token);\r\n    return token;\r\n  } catch (error) {\r\n    console.error('Error verifying OTP:', error.response ? error.response.data : error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Load Razorpay script dynamically\r\nconst loadRazorpayScript = () => {\r\n  return new Promise((resolve, reject) => {\r\n    if (window.Razorpay) {\r\n      resolve();\r\n      return;\r\n    }\r\n\r\n    const script = document.createElement('script');\r\n    script.src = 'https://checkout.razorpay.com/v1/checkout.js';\r\n    script.onload = () => resolve();\r\n    script.onerror = () => reject('Failed to load Razorpay script');\r\n    document.body.appendChild(script);\r\n  });\r\n};\r\n\r\n// Fetch Razorpay key using the token\r\nexport const fetchRazorpayKey = async (token) => {\r\n  try {\r\n    const response = await axios.post('https://api.testbuddy.live/v1/payment/key', {}, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    return response.data.key; // Ensure 'key' is the correct field\r\n  } catch (error) {\r\n    console.error('Error fetching Razorpay key:', error.response ? error.response.data : error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create an order\r\nexport const createOrder = async (token, packageId, pricingId, finalAmount, couponCode) => {\r\n  try {\r\n    const response = await axios.post(\r\n      'https://api.testbuddy.live/v1/order/create',\r\n      {\r\n        packageId,\r\n        pricingId,\r\n        finalAmount,\r\n        couponCode,\r\n      },\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n    return response.data._id; // Ensure '_id' is the correct field for the transaction ID\r\n  } catch (error) {\r\n    console.error('Error creating order:', error.response ? error.response.data : error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Initiate payment using Razorpay\r\nexport const initiatePayment = async (orderId, razorpayKey, verifyOrder) => {\r\n  try {\r\n    const options = {\r\n      key: razorpayKey || RAZORPAY_KEY, // Use the fetched Razorpay key\r\n      amount: 44100, // Amount in paise (e.g., 441.00 INR)\r\n      currency: 'INR',\r\n      name: 'Your Company Name',\r\n      description: 'Test Transaction',\r\n      order_id: orderId,\r\n      handler: async (response) => {\r\n        try {\r\n          await verifyOrder(response.razorpay_payment_id, response.razorpay_signature, orderId);\r\n          alert('Payment Successful!');\r\n        } catch (error) {\r\n          alert('Payment Verification Failed!');\r\n        }\r\n      },\r\n      prefill: {\r\n        name: 'John Doe',\r\n        email: 'john.doe@example.com',\r\n        contact: '9999999999',\r\n      },\r\n    };\r\n\r\n    await loadRazorpayScript(); // Ensure Razorpay script is loaded\r\n    const rzp = new window.Razorpay(options);\r\n    rzp.open();\r\n  } catch (error) {\r\n    console.error('Error initiating payment:', error.message);\r\n    alert('Payment initiation failed!');\r\n  }\r\n};\r\n\r\n// Verify order payment details\r\nexport const verifyOrder = async (token, razorpayPaymentId, razorpaySignature, transactionId) => {\r\n  try {\r\n    const response = await axios.post(\r\n      'https://api.testbuddy.live/v1/order/verify',\r\n      {\r\n        transactionId,\r\n        razorpayPaymentId,\r\n        razorpaySignature,\r\n      },\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error verifying order:', error.response ? error.response.data : error.message);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}