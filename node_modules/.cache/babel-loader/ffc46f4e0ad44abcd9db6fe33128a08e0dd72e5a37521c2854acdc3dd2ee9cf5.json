{"ast":null,"code":"// import axios from 'axios';\n// const razorpayKe = 'rzp_test_qUtLOVt2Ge3dFM';\n\n// export const verifyOtpAndGetToken = async () => {\n//   try {\n//     const response = await axios.post('https://api.testbuddy.live/v1/auth/verifyotp', {\n//       mobile: '+919098989999', // Replace with the correct mobile number\n//       otp: '8899', // Replace with the correct OTP\n//     });\n\n//     const token = response.data.token;\n//     console.log('Generated Bearer Token:', token);\n//     return token;\n//   } catch (error) {\n//     console.error('Error verifying OTP:', error);\n//     throw error;\n//   }\n// };\n\n// const loadRazorpayScript = () => {\n//     return new Promise((resolve) => {\n//       const script = document.createElement('script');\n//       script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n//       script.onload = () => resolve();\n//       script.onerror = () => console.error('Failed to load Razorpay script');\n//       document.body.appendChild(script);\n//     });\n//   };\n\n// export const fetchRazorpayKey = async (token) => {\n//     try {\n//       const response = await axios.post('https://api.testbuddy.live/v1/payment/key', {}, {\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//         },\n//       });\n//       return response.data.key; // Assuming 'key' is returned in the response\n//     } catch (error) {\n//       console.error('Error fetching Razorpay key:', error);\n//       throw error;\n//     }\n//   };\n\n//   export const createOrder = async (token, packageId, pricingId, finalAmount, couponCode) => {\n//     try {\n//       const response = await axios.post(\n//         'https://api.testbuddy.live/v1/order/create',\n//         {\n//           packageId,\n//           pricingId,\n//           finalAmount,\n//           couponCode,\n//         },\n//         {\n//           headers: {\n//             Authorization: `Bearer ${token}`,\n//           },\n//         }\n//       );\n//       return response.data._id; // Assuming '_id' is the transactionId\n//     } catch (error) {\n//       console.error('Error creating order:', error);\n//       throw error;\n//     }\n//   };\n\n//   export const initiatePayment = async (orderId, razorpayKey, verifyOrder) => {\n//     const options = {\n//       key:razorpayKe,\n//       amount: 44100, // Amount in paise (e.g., 441.00 INR)\n//       currency: 'INR',\n//       name: 'Your Company Name',\n//       description: 'Test Transaction',\n//       order_id: orderId,\n//       handler: async (response) => {\n//         try {\n//           await verifyOrder(response.razorpay_payment_id, response.razorpay_signature, orderId);\n//           alert('Payment Successful!');\n//         } catch (error) {\n//           alert('Payment Verification Failed!');\n//         }\n//       },\n//       prefill: {\n//         name: 'John Doe',\n//         email: 'john.doe@example.com',\n//         contact: '9999999999',\n//       },\n//     };\n\n//     const rzp = new window.Razorpay(options);\n//     rzp.open();\n//   };\n\n//   export const verifyOrder = async (token, razorpayPaymentId, razorpaySignature, transactionId) => {\n//     try {\n//       const response = await axios.post(\n//         'https://api.testbuddy.live/v1/order/verify',\n//         {\n//           transactionId,\n//           razorpayPaymentId,\n//           razorpaySignature,\n//         },\n//         {\n//           headers: {\n//             Authorization: `Bearer ${token}`,\n//           },\n//         }\n//       );\n//       return response.data;\n//     } catch (error) {\n//       console.error('Error verifying order:', error);\n//       throw error;\n//     }\n//   };","map":{"version":3,"names":[],"sources":["C:/Users/prath/Desktop/react/razorpay-integration/src/api.js"],"sourcesContent":["// import axios from 'axios';\r\n// const razorpayKe = 'rzp_test_qUtLOVt2Ge3dFM';\r\n\r\n// export const verifyOtpAndGetToken = async () => {\r\n//   try {\r\n//     const response = await axios.post('https://api.testbuddy.live/v1/auth/verifyotp', {\r\n//       mobile: '+919098989999', // Replace with the correct mobile number\r\n//       otp: '8899', // Replace with the correct OTP\r\n//     });\r\n\r\n//     const token = response.data.token;\r\n//     console.log('Generated Bearer Token:', token);\r\n//     return token;\r\n//   } catch (error) {\r\n//     console.error('Error verifying OTP:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n\r\n\r\n// const loadRazorpayScript = () => {\r\n//     return new Promise((resolve) => {\r\n//       const script = document.createElement('script');\r\n//       script.src = 'https://checkout.razorpay.com/v1/checkout.js';\r\n//       script.onload = () => resolve();\r\n//       script.onerror = () => console.error('Failed to load Razorpay script');\r\n//       document.body.appendChild(script);\r\n//     });\r\n//   };\r\n\r\n// export const fetchRazorpayKey = async (token) => {\r\n//     try {\r\n//       const response = await axios.post('https://api.testbuddy.live/v1/payment/key', {}, {\r\n//         headers: {\r\n//           Authorization: `Bearer ${token}`,\r\n//         },\r\n//       });\r\n//       return response.data.key; // Assuming 'key' is returned in the response\r\n//     } catch (error) {\r\n//       console.error('Error fetching Razorpay key:', error);\r\n//       throw error;\r\n//     }\r\n//   };\r\n  \r\n\r\n//   export const createOrder = async (token, packageId, pricingId, finalAmount, couponCode) => {\r\n//     try {\r\n//       const response = await axios.post(\r\n//         'https://api.testbuddy.live/v1/order/create',\r\n//         {\r\n//           packageId,\r\n//           pricingId,\r\n//           finalAmount,\r\n//           couponCode,\r\n//         },\r\n//         {\r\n//           headers: {\r\n//             Authorization: `Bearer ${token}`,\r\n//           },\r\n//         }\r\n//       );\r\n//       return response.data._id; // Assuming '_id' is the transactionId\r\n//     } catch (error) {\r\n//       console.error('Error creating order:', error);\r\n//       throw error;\r\n//     }\r\n//   };\r\n\r\n//   export const initiatePayment = async (orderId, razorpayKey, verifyOrder) => {\r\n//     const options = {\r\n//       key:razorpayKe,\r\n//       amount: 44100, // Amount in paise (e.g., 441.00 INR)\r\n//       currency: 'INR',\r\n//       name: 'Your Company Name',\r\n//       description: 'Test Transaction',\r\n//       order_id: orderId,\r\n//       handler: async (response) => {\r\n//         try {\r\n//           await verifyOrder(response.razorpay_payment_id, response.razorpay_signature, orderId);\r\n//           alert('Payment Successful!');\r\n//         } catch (error) {\r\n//           alert('Payment Verification Failed!');\r\n//         }\r\n//       },\r\n//       prefill: {\r\n//         name: 'John Doe',\r\n//         email: 'john.doe@example.com',\r\n//         contact: '9999999999',\r\n//       },\r\n//     };\r\n  \r\n//     const rzp = new window.Razorpay(options);\r\n//     rzp.open();\r\n//   };\r\n  \r\n\r\n//   export const verifyOrder = async (token, razorpayPaymentId, razorpaySignature, transactionId) => {\r\n//     try {\r\n//       const response = await axios.post(\r\n//         'https://api.testbuddy.live/v1/order/verify',\r\n//         {\r\n//           transactionId,\r\n//           razorpayPaymentId,\r\n//           razorpaySignature,\r\n//         },\r\n//         {\r\n//           headers: {\r\n//             Authorization: `Bearer ${token}`,\r\n//           },\r\n//         }\r\n//       );\r\n//       return response.data;\r\n//     } catch (error) {\r\n//       console.error('Error verifying order:', error);\r\n//       throw error;\r\n//     }\r\n//   };\r\n  "],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}